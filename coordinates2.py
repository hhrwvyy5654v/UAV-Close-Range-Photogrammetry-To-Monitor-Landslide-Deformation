import cv2
import numpy as np

"""
其中,fx、fy、cx、cy是相机内参矩阵中的参数,
k1、k2、p1、p2是畸变系数中的参数,
x1、y1、z1等是已知的四个点在世界坐标系中的坐标,
rx、ry、rz是相机参数中的旋转向量,
tx、ty、tz是相机参数中的平移向量,
u和v是指定点在图像上的像素坐标。
"""


# 相机内参矩阵
K = np.array([[755.39354935, 0, 504.39208928],
              [0, 754.16550667, 371.66825215],
              [0, 0, 1]])

# 畸变系数
dist = np.array([2.83890589e-01, -1.65886965e+00,
                4.88852246e-04, -4.33686303e-04, 3.34750924e+00])

# 已知的四个点的世界坐标
obj_points = np.array([[5, 5, 0], [5, -5, 0], [-5, -5, 0], [-5, 5, 0]])

# 相机参数
rvec = np.array([[0.6160709], [0.31918769], [-3.05625136]],
                [[0.05421479], [-0.35478944], [3.10816923]],
                [[0.63120633], [-0.53283798], [3.02265851]],
                [[-0.00889303], [0.31416873], [-3.10988726]],
                [[-0.04012786], [0.14202642], [3.13231465]],
                [[0.0524515], [0.8688805], [-2.99727356]],
                [[-0.80307989], [-0.63833455], [2.96353426]],
                [[-0.80551387], [0.57597935], [-2.9190048]],
                [[0.56067102], [-0.09787448], [3.01273527]],
                [[-0.04139356], [-0.28803636], [3.12051874]],
                [[0.10592237], [0.99621715], [-2.94802917]],
                [[-0.99463588], [-0.05541256], [2.97683571]])

tvec = np.array([[4.5440656], [2.84557833], [21.9832278]],
                [[4.32816929], [2.06501245], [17.52477812]],
                [[4.82925756], [4.32195884], [16.04758798]],
                [[5.41823029], [4.38285535], [21.4956411]],
                [[5.39014105], [1.74312304], [17.49776103]],
                [[5.63547068], [2.86433755], [21.07262234]],
                [[4.96849162], [3.98883293], [24.62221634]],
                [[3.99623057], [5.7031846], [16.70025505]],
                [[5.36718989], [3.39025056], [20.79585192]],
                [[5.14095769], [3.26952519], [14.70358712]],
                [[6.22595593], [3.51393998], [25.53231768]],
                [[3.03018904], [2.12977268], [23.62621352]])

# 指定点在图像上的像素坐标
image_point = np.array([10, 10])

# 求解指定点的世界坐标
success_flag, rvec_out, tvec_out = cv2.solvePnP(obj_points=obj_points,
                                                image_points=image_point,
                                                cameraMatrix=K,
                                                distCoeffs=dist,
                                                rvec=rvec,
                                                tvec=tvec)

world_point = tvec_out.T[0]

print("world_point:", world_point)